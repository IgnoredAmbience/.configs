;;-*-coding: utf-8;-*-
(define-abbrev-table 'Buffer-menu-mode-abbrev-table '())

(define-abbrev-table 'Custom-mode-abbrev-table '())

(define-abbrev-table 'apropos-mode-abbrev-table '())

(define-abbrev-table 'comint-mode-abbrev-table '())

(define-abbrev-table 'completion-list-mode-abbrev-table '())

(define-abbrev-table 'conf-colon-mode-abbrev-table '())

(define-abbrev-table 'conf-javaprop-mode-abbrev-table '())

(define-abbrev-table 'conf-ppd-mode-abbrev-table '())

(define-abbrev-table 'conf-space-mode-abbrev-table '())

(define-abbrev-table 'conf-unix-mode-abbrev-table '())

(define-abbrev-table 'conf-windows-mode-abbrev-table '())

(define-abbrev-table 'conf-xdefaults-mode-abbrev-table '())

(define-abbrev-table 'coq-goals-mode-abbrev-table '())

(define-abbrev-table 'coq-mode-abbrev-table
  '(
    ("Let" "Let # : # := #." holes-abbrev-complete 0)
    ("a" "auto" holes-abbrev-complete 0)
    ("abs" "absurd " holes-abbrev-complete 0)
    ("addmor" "Add Morphism @{f} : @{id}" holes-abbrev-complete 0)
    ("ap" "apply " holes-abbrev-complete 0)
    ("ar" "autorewrite with @{db,db...}" holes-abbrev-complete 0)
    ("argsc" "Arguments Scope @{id} [ @{_} ]" holes-abbrev-complete 0)
    ("arwi" "autorewrite with @{db,db...} in @{hyp}" holes-abbrev-complete 0)
    ("arwiu" "autorewrite with @{db,db...} in @{hyp} using @{tac}" holes-abbrev-complete 0)
    ("arwu" "autorewrite with @{db,db...} using @{tac}" holes-abbrev-complete 0)
    ("as" "assumption" holes-abbrev-complete 0)
    ("ass" "assert ( # : # )" holes-abbrev-complete 0)
    ("assb" "assert ( # : # ) by #" holes-abbrev-complete 0)
    ("aw" "auto with @{db}" holes-abbrev-complete 0)
    ("awa" "auto with arith" holes-abbrev-complete 0)
    ("ax" "Axiom # : #" holes-abbrev-complete 0)
    ("bndsc" "Bind Scope @{scope} with @{type}" holes-abbrev-complete 0)
    ("by" "by #" holes-abbrev-complete 0)
    ("c" "case " holes-abbrev-complete 0)
    ("cbv" "cbv beta [#] delta iota zeta" holes-abbrev-complete 0)
    ("cfix" "CoFixpoint # (#:#) : # :=
#." holes-abbrev-complete 0)
    ("ch" "change " holes-abbrev-complete 0)
    ("chi" "change # in #" holes-abbrev-complete 0)
    ("chp" "Chapter # : #." holes-abbrev-complete 0)
    ("chw" "change # with" holes-abbrev-complete 0)
    ("chwi" "change # with # in #" holes-abbrev-complete 0)
    ("cl" "clearbody" holes-abbrev-complete 0)
    ("cllsc" "Close Local Scope #" holes-abbrev-complete 0)
    ("clsc" "Close Scope #" holes-abbrev-complete 0)
    ("cmpa" "compare # #" holes-abbrev-complete 0)
    ("cmpu" "compute" holes-abbrev-complete 0)
    ("coerc" "Coercion @{id} : @{typ1} >-> @{typ2}." holes-abbrev-complete 0)
    ("cof" "cofix" holes-abbrev-complete 0)
    ("coind" "coinduction" holes-abbrev-complete 0)
    ("coindv" "CoInductive # : # :=
|# : #." holes-abbrev-complete 0)
    ("cong" "congruence" holes-abbrev-complete 0)
    ("conj" "Conjecture #: #." holes-abbrev-complete 0)
    ("cons" "constructor" holes-abbrev-complete 0)
    ("contr" "contradiction" holes-abbrev-complete 0)
    ("cor" "Corollary # : #.
Proof.
#
Qed." holes-abbrev-complete 0)
    ("cut" "cut" holes-abbrev-complete 0)
    ("cutr" "cutrewrite -> # = #" holes-abbrev-complete 0)
    ("dec" "decompose [#] #" holes-abbrev-complete 0)
    ("decr" "decompose record #" holes-abbrev-complete 0)
    ("decs" "decompose sum #" holes-abbrev-complete 0)
    ("def" "Definition #:# := #." holes-abbrev-complete 0)
    ("def2" "Definition # (# : #) (# : #):# := #." holes-abbrev-complete 0)
    ("def3" "Definition # (# : #) (# : #) (# : #):# := #." holes-abbrev-complete 0)
    ("def4" "Definition # (# : #) (# : #) (# : #) (# : #):# := #." holes-abbrev-complete 0)
    ("defg" "Definition #:#.
#
Save." holes-abbrev-complete 0)
    ("deg" "decide equality" holes-abbrev-complete 0)
    ("delsc" "Delimit Scope @{scope} with @{id}." holes-abbrev-complete 0)
    ("depinv" "dependent inversion" holes-abbrev-complete 0)
    ("depinvc" "dependent inversion_clear" holes-abbrev-complete 0)
    ("depinvw" "dependent inversion_clear # with #" holes-abbrev-complete 0)
    ("depr" "dependent rewrite -> @{id}" holes-abbrev-complete 0)
    ("depr<" "dependent rewrite <- @{id}" holes-abbrev-complete 0)
    ("des" "destruct " holes-abbrev-complete 0)
    ("desa" "destruct # as #" holes-abbrev-complete 0)
    ("desu" "destruct # using #" holes-abbrev-complete 0)
    ("dind" "double induction # #" holes-abbrev-complete 0)
    ("dis" "discriminate" holes-abbrev-complete 0)
    ("discrR" "discrR" holes-abbrev-complete 0)
    ("dm" "Declare Module # : # := #." holes-abbrev-complete 0)
    ("dm2" "Declare Module # <: # := #." holes-abbrev-complete 0)
    ("dme" "Declare Module # : # := #." holes-abbrev-complete 0)
    ("dme2" "Declare Module # <: # := #." holes-abbrev-complete 0)
    ("dmi" "Declare Module # : #.
#
End #." holes-abbrev-complete 0)
    ("dmi2" "Declare Module # <: #.
#
End #." holes-abbrev-complete 0)
    ("e" "elim #" holes-abbrev-complete 0)
    ("ea" "eauto" holes-abbrev-complete 0)
    ("eap" "eapply #" holes-abbrev-complete 0)
    ("eaw" "eauto with @{db}" holes-abbrev-complete 0)
    ("eawa" "eauto with arith" holes-abbrev-complete 0)
    ("econs" "econstructor" holes-abbrev-complete 0)
    ("eex" "eexists" holes-abbrev-complete 0)
    ("eleft" "eleft" holes-abbrev-complete 0)
    ("elt" "elimtype" holes-abbrev-complete 0)
    ("elu" "elim # using #" holes-abbrev-complete 0)
    ("erig" "eright" holes-abbrev-complete 0)
    ("esp" "esplit" holes-abbrev-complete 0)
    ("ex" "exists #" holes-abbrev-complete 0)
    ("exa" "exact" holes-abbrev-complete 0)
    ("extr" "Extraction @{id}." holes-abbrev-complete 0)
    ("extrc" "Extract Constant @{id} => \"@{id}\"." holes-abbrev-complete 0)
    ("extrf" "Extraction \"@{file}\" @{id}." holes-abbrev-complete 0)
    ("extri" "Extract Inductive @{id} => \"@{id}\" [\"@{id}\" \"@{id...}\"]." holes-abbrev-complete 0)
    ("extric" "Extract Inlined Constant @{id} => \"@{id}\"." holes-abbrev-complete 0)
    ("extrl" "Extraction Library @{id}." holes-abbrev-complete 0)
    ("extrlang" "Extraction Language #." holes-abbrev-complete 0)
    ("f" "fun #:# => #" holes-abbrev-complete 0)
    ("f2" "fun (#:#) (#:#) => #" holes-abbrev-complete 0)
    ("f3" "fun (#:#) (#:#) (#:#) => #" holes-abbrev-complete 0)
    ("f4" "fun (#:#) (#:#) (#:#) (#:#) => #" holes-abbrev-complete 0)
    ("fa" "fail" holes-abbrev-complete 0)
    ("fct" "Fact # : #." holes-abbrev-complete 0)
    ("fi" "functional induction @{f} @{args}" holes-abbrev-complete 0)
    ("field" "field" holes-abbrev-complete 0)
    ("fix" "Fixpoint # (#:#) {struct @{arg}} : # :=
#." holes-abbrev-complete 0)
    ("fo" "forall #:#,#" holes-abbrev-complete 0)
    ("fo2" "forall (#:#) (#:#), #" holes-abbrev-complete 0)
    ("fo3" "forall (#:#) (#:#) (#:#), #" holes-abbrev-complete 0)
    ("fo4" "forall (#:#) (#:#) (#:#) (#:#), #" holes-abbrev-complete 0)
    ("fold" "fold #" holes-abbrev-complete 0)
    ("four" "fourier" holes-abbrev-complete 0)
    ("fs" "Functional Scheme @{name} := Induction for @{fun}." holes-abbrev-complete 0)
    ("fsto" "firstorder # with #" holes-abbrev-complete 0)
    ("fsw" "Functional Scheme @{name} := Induction for @{fun} with @{mutfuns}." holes-abbrev-complete 0)
    ("func" "Function # (#:#) {struct @{arg}} : # :=
#." holes-abbrev-complete 0)
    ("func wf" "Function # (#:#) {wf @{R} @{arg}} : # :=
#." holes-abbrev-complete 0)
    ("funcm" "Function # (#:#) {measure @{f} @{arg}} : # :=
#." holes-abbrev-complete 0)
    ("g" "generalize #" holes-abbrev-complete 0)
    ("gd" "generalize dependent #" holes-abbrev-complete 0)
    ("hc" "Hint Constructors # : #." holes-abbrev-complete 0)
    ("he" "Hint Extern @{cost} @{pat} => @{tac} : @{db}." holes-abbrev-complete 0)
    ("hi" "Hint Immediate # : @{db}." holes-abbrev-complete 0)
    ("hnf" "hnf" holes-abbrev-complete 0)
    ("hr" "Hint Resolve # : @{db}." holes-abbrev-complete 0)
    ("hrw" "Hint Rewrite <- @{t1,t2...} using @{tac} : @{db}." holes-abbrev-complete 0)
    ("hu" "Hint Unfold # : #." holes-abbrev-complete 0)
    ("hyp" "Hypotheses #: #" holes-abbrev-complete 0)
    ("i" "intro" holes-abbrev-complete 0)
    ("ia" "intro # after #" holes-abbrev-complete 0)
    ("id" "idtac" holes-abbrev-complete 0)
    ("id\"" "idtac \"#\"" holes-abbrev-complete 0)
    ("if" "if # then # else #" holes-abbrev-complete 0)
    ("ind" "induction #" holes-abbrev-complete 0)
    ("indu" "induction # using #" holes-abbrev-complete 0)
    ("indv" "Inductive # : # := # : #." holes-abbrev-complete 0)
    ("indv2" "Inductive # : # :=
| # : #
| # : #." holes-abbrev-complete 0)
    ("indv3" "Inductive # : # :=
| # : #
| # : #
| # : #." holes-abbrev-complete 0)
    ("indv4" "Inductive # : # :=
| # : #
| # : #
| # : #
| # : #." holes-abbrev-complete 0)
    ("indv5" "Inductive # : # :=
| # : #
| # : #
| # : #
| # : #
| # : #." holes-abbrev-complete 0)
    ("inf" "Infix \"#\" := # (at level #) : @{scope}." holes-abbrev-complete 0)
    ("inj" "injection #" holes-abbrev-complete 0)
    ("inst" "instantiate" holes-abbrev-complete 0)
    ("intu" "intuition #" holes-abbrev-complete 0)
    ("inv" "inversion #" holes-abbrev-complete 0)
    ("invcl" "inversion_clear" holes-abbrev-complete 0)
    ("invi" "inversion # in #" holes-abbrev-complete 0)
    ("invu" "inversion # using #" holes-abbrev-complete 0)
    ("invui" "inversion # using # in #" holes-abbrev-complete 0)
    ("is" "intros #" holes-abbrev-complete 0)
    ("isu" "intros until #" holes-abbrev-complete 0)
    ("l" "Lemma # : #.
Proof.
#
Qed." holes-abbrev-complete 0)
    ("lap" "lapply" holes-abbrev-complete 0)
    ("lazy" "lazy beta [#] delta iota zeta" holes-abbrev-complete 0)
    ("left" "left" holes-abbrev-complete 0)
    ("li" "let # := # in #" holes-abbrev-complete 0)
    ("lin" "linear" holes-abbrev-complete 0)
    ("load" "load" holes-abbrev-complete 0)
    ("ltac" "Ltac # := #" holes-abbrev-complete 0)
    ("m" "match # with
| # => #
end" holes-abbrev-complete 0)
    ("m2" "match # with
| # => #
| # => #
end" holes-abbrev-complete 0)
    ("m3" "match # with
| # => #
| # => #
| # => #
end" holes-abbrev-complete 0)
    ("m4" "match # with
| # => #
| # => #
| # => #
| # => #
end" holes-abbrev-complete 0)
    ("m5" "match # with
| # => #
| # => #
| # => #
| # => #
| # => #
end" holes-abbrev-complete 0)
    ("mo" "Module # : # := #." holes-abbrev-complete 0)
    ("mo2" "Module # <: # := #." holes-abbrev-complete 0)
    ("moe" "Module Export # : # := #." holes-abbrev-complete 0)
    ("moe2" "Module Export# <: # := #." holes-abbrev-complete 0)
    ("moi" "Module # : #.
#
End #." holes-abbrev-complete 0)
    ("moi2" "Module # <: #.
#
End #." holes-abbrev-complete 0)
    ("mov" "move # after #" holes-abbrev-complete 0)
    ("mti" "Module Type #.
#
End #." holes-abbrev-complete 0)
    ("nobl" "Next Obligation.
#
Qed." holes-abbrev-complete 0)
    ("nota" "Notation \"#\" := # (at level #, # at level #)." holes-abbrev-complete 0)
    ("notas" "Notation \"#\" := # (at level #, # associativity)." holes-abbrev-complete 0)
    ("notasc" "Notation \"#\" := # (at level #, # at level #) : @{scope}." holes-abbrev-complete 0)
    ("notassc" "Notation \"#\" := # (at level #, # associativity) : @{scope}." holes-abbrev-complete 0)
    ("nots" "Notation # := #." holes-abbrev-complete 0)
    ("notsl" "Notation Local # := #." holes-abbrev-complete 0)
    ("notslp" "Notation Local # := # (only parsing)." holes-abbrev-complete 0)
    ("notsp" "Notation # := # (only parsing)." holes-abbrev-complete 0)
    ("o" "omega" holes-abbrev-complete 0)
    ("obl" "Obligation #.
#
Qed." holes-abbrev-complete 0)
    ("oblsadmit" "Admit Obligations." holes-abbrev-complete 0)
    ("oblssolve" "Solve Obligations using #." holes-abbrev-complete 0)
    ("oplsc" "Open Local Scope #" holes-abbrev-complete 0)
    ("opsc" "Open Scope #" holes-abbrev-complete 0)
    ("p" "Print #." holes-abbrev-complete 0)
    ("par" "Parameter #: #" holes-abbrev-complete 0)
    ("pat" "pattern" holes-abbrev-complete 0)
    ("pata" "pattern # at #" holes-abbrev-complete 0)
    ("pats" "pattern # , #" holes-abbrev-complete 0)
    ("pdef" "Program Definition #:# := #." holes-abbrev-complete 0)
    ("pdef2" "Program Definition # (# : #) (# : #):# := #." holes-abbrev-complete 0)
    ("pdef3" "Program Definition # (# : #) (# : #) (# : #):# := #." holes-abbrev-complete 0)
    ("pdef4" "Program Definition # (# : #) (# : #) (# : #) (# : #):# := #." holes-abbrev-complete 0)
    ("pfix" "Program Fixpoint # (#:#) {struct @{arg}} : # :=
#." holes-abbrev-complete 0)
    ("pfixm" "Program Fixpoint # (#:#) {measure @{arg} @{f}} : # :=
#." holes-abbrev-complete 0)
    ("pfixwf" "Program Fixpoint # (#:#) {wf @{arg} @{f}} : # :=
#." holes-abbrev-complete 0)
    ("pl" "Program Lemma # : #.
Proof.
#
Qed." holes-abbrev-complete 0)
    ("po" "pose ( # := # )" holes-abbrev-complete 0)
    ("prol" "prolog" holes-abbrev-complete 0)
    ("pth" "Program Theorem # : #.
Proof.
#
Qed." holes-abbrev-complete 0)
    ("quote" "quote" holes-abbrev-complete 0)
    ("quote2" "quote # [#]" holes-abbrev-complete 0)
    ("r" "rewrite #" holes-abbrev-complete 0)
    ("r<" "rewrite <- #" holes-abbrev-complete 0)
    ("rec" "Record # : # := {
# : #;
# : # }" holes-abbrev-complete 0)
    ("recextr" "Recursive Extraction @{id}." holes-abbrev-complete 0)
    ("recextrl" "Recursive Extraction Library @{id}." holes-abbrev-complete 0)
    ("recextrm" "Recursive Extraction Module @{id}." holes-abbrev-complete 0)
    ("red" "red" holes-abbrev-complete 0)
    ("ref" "refine" holes-abbrev-complete 0)
    ("refl" "reflexivity #" holes-abbrev-complete 0)
    ("ren" "rename # into #" holes-abbrev-complete 0)
    ("rep" "replace # with #" holes-abbrev-complete 0)
    ("repi" "replace # with # in #" holes-abbrev-complete 0)
    ("ri" "rewrite # in #" holes-abbrev-complete 0)
    ("ri<" "rewrite <- # in #" holes-abbrev-complete 0)
    ("rig" "right" holes-abbrev-complete 0)
    ("ring" "ring #" holes-abbrev-complete 0)
    ("rk" "Remark # : #.
#
Qed." holes-abbrev-complete 0)
    ("s" "simpl" holes-abbrev-complete 0)
    ("sa" "simpl # at #" holes-abbrev-complete 0)
    ("sc" "Scheme @{name} := #." holes-abbrev-complete 0)
    ("sci" "Scheme @{name} := Induction for # Sort #." holes-abbrev-complete 0)
    ("scm" "Scheme @{name} := Minimality for # Sort #." holes-abbrev-complete 0)
    ("sdes" "simple destruct" holes-abbrev-complete 0)
    ("sec" "Section #." holes-abbrev-complete 0)
    ("set" "set ( # := #)" holes-abbrev-complete 0)
    ("set*" "set ( # := #) in *" holes-abbrev-complete 0)
    ("setg" "set ( # := #) in |- *" holes-abbrev-complete 0)
    ("seth" "set ( # := #) in * |-" holes-abbrev-complete 0)
    ("seti" "set ( # := #) in #" holes-abbrev-complete 0)
    ("simeq" "simplify_eq @{hyp}" holes-abbrev-complete 0)
    ("sind" "simple induction" holes-abbrev-complete 0)
    ("sinv" "simple inversion" holes-abbrev-complete 0)
    ("sp" "split" holes-abbrev-complete 0)
    ("spec" "specialize" holes-abbrev-complete 0)
    ("spra" "splitRabs" holes-abbrev-complete 0)
    ("sprall" "Set Printing All" holes-abbrev-complete 0)
    ("sprm" "splitRmult" holes-abbrev-complete 0)
    ("sprn" "Set Printing Notations" holes-abbrev-complete 0)
    ("stl" "stepl #" holes-abbrev-complete 0)
    ("stlb" "stepl # by #" holes-abbrev-complete 0)
    ("str" "Structure # : # := {
# : #;
# : # }" holes-abbrev-complete 0)
    ("strb" "stepr # by #" holes-abbrev-complete 0)
    ("strep" "setoid replace # with #" holes-abbrev-complete 0)
    ("strep2" "setoid_replace # with #" holes-abbrev-complete 0)
    ("strew" "setoid rewrite #" holes-abbrev-complete 0)
    ("su" "subst #" holes-abbrev-complete 0)
    ("sy" "symmetry" holes-abbrev-complete 0)
    ("syi" "symmetry in #" holes-abbrev-complete 0)
    ("t" "trivial" holes-abbrev-complete 0)
    ("ta" "tauto" holes-abbrev-complete 0)
    ("th" "Theorem # : #.
#
Qed." holes-abbrev-complete 0)
    ("trans" "transitivity #" holes-abbrev-complete 0)
    ("tw" "trivial with @{db}" holes-abbrev-complete 0)
    ("u" "unfold #" holes-abbrev-complete 0)
    ("unfa" "unfold # at #" holes-abbrev-complete 0)
    ("unfi" "unfold # in #" holes-abbrev-complete 0)
    ("unsprall" "Unset Printing All" holes-abbrev-complete 0)
    ("unsprn" "Unset Printing Notations" holes-abbrev-complete 0)
    ("us" "unfold # , #" holes-abbrev-complete 0)
    ("v" "Variable #: #." holes-abbrev-complete 0)
    ("vs" "Variables # , #: #." holes-abbrev-complete 0)
   ))

(define-abbrev-table 'coq-response-mode-abbrev-table '())

(define-abbrev-table 'coq-shell-mode-abbrev-table '())

(define-abbrev-table 'diff-mode-abbrev-table '())

(define-abbrev-table 'doctex-mode-abbrev-table '())

(define-abbrev-table 'emacs-lisp-mode-abbrev-table '())

(define-abbrev-table 'fundamental-mode-abbrev-table '())

(define-abbrev-table 'global-abbrev-table '())

(define-abbrev-table 'help-mode-abbrev-table '())

(define-abbrev-table 'latex-mode-abbrev-table '())

(define-abbrev-table 'lisp-mode-abbrev-table '())

(define-abbrev-table 'message-mode-abbrev-table '())

(define-abbrev-table 'occur-edit-mode-abbrev-table '())

(define-abbrev-table 'occur-mode-abbrev-table '())

(define-abbrev-table 'outline-mode-abbrev-table '())

(define-abbrev-table 'plain-tex-mode-abbrev-table '())

(define-abbrev-table 'process-menu-mode-abbrev-table '())

(define-abbrev-table 'prog-mode-abbrev-table '())

(define-abbrev-table 'proof-goals-mode-abbrev-table '())

(define-abbrev-table 'proof-mode-abbrev-table '())

(define-abbrev-table 'proof-response-mode-abbrev-table '())

(define-abbrev-table 'proof-shell-mode-abbrev-table '())

(define-abbrev-table 'proof-splash-mode-abbrev-table '())

(define-abbrev-table 'proof-universal-keys-only-mode-abbrev-table '())

(define-abbrev-table 'scomint-mode-abbrev-table '())

(define-abbrev-table 'select-tags-table-mode-abbrev-table '())

(define-abbrev-table 'shell-mode-abbrev-table '())

(define-abbrev-table 'slitex-mode-abbrev-table '())

(define-abbrev-table 'special-mode-abbrev-table '())

(define-abbrev-table 'speedbar-mode-abbrev-table '())

(define-abbrev-table 'tex-mode-abbrev-table '())

(define-abbrev-table 'tex-shell-abbrev-table '())

(define-abbrev-table 'text-mode-abbrev-table '())

(define-abbrev-table 'vc-git-log-view-mode-abbrev-table '())

(define-abbrev-table 'verilog-mode-abbrev-table
  '(
   ))

